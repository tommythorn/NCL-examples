/*
 *
 * I got tired of computing the LUT mask by hand, so here's a helper.
 *
 * Note, the LUT inputs are not the same speed.  It appears (to be
 * verified) that D is the fastest (and presumably A is the slowest).
 *
 * We need to take that into account, using the fastest for value
 * input, the slowest for init, etc.
 */
pub fn mk_gate(
    gate_name: &str,
    z: &str,
    a: &str,
    b: &str,
    c: &str,
    d: &str,
    f: impl Fn(bool, bool, bool, bool) -> bool,
) {
    println!("// Autogenerated by mk_lut");
    print!("module {gate_name}(output {z}");

    if a != z {
        print!(", input {a}");
    }
    if b != z {
        print!(", input {b}");
    }
    if c != z {
        print!(", input {c}");
    }
    if d != z {
        print!(", input {d}");
    }
    println!(");");

    let mut mask: u16 = 0;

    println!("  //    D    C    B    A  |  Z");
    println!("  // {d:>4} {c:>4} {b:>4} {a:>4}  |  {z}");
    println!("  // ---------------------+------");

    for p in 0..16 {
        let a = p & 1 != 0;
        let b = p & 2 != 0;
        let c = p & 4 != 0;
        let d = p & 8 != 0;

        let z = f(a, b, c, d);

        println!(
            "  // {:4} {:4} {:4} {:4}  |  {}",
            d as usize, c as usize, b as usize, a as usize, z as usize
        );

        if z {
            mask |= 1 << p;
        }
    }

    println!("  (* keep *) LUT4 #(.INIT(16'h{mask:04x})) inst (.Z({z}), .A({a}), .B({b}), .C({c}), .D({d}));");
    println!("endmodule");
    println!();
}

// TH22, NULL init, inverted b (= ack)
// inputs sorted by criticallity ("a" the most important, "init" the least)
fn th22ni(init: bool, z: bool, b: bool, a: bool) -> bool {

    if init {
        false // inits to NULL
    } else if a == !b {
        a
    } else {
        z
    }
}

// TH22, DATA init, inverted b (= ack)
// inputs sorted by criticallity ("a" the most important, "init" the least)
fn th22di(init: bool, z: bool, ack: bool, a: bool) -> bool {

    if init {
        true // inits to DATA
    } else if a == !ack {
        a
    } else {
        z
    }
}

fn main() {
    // Make sure the input names matches the function arguments
    mk_gate("th22ni", "z", "init", "z", "ack", "a", &th22ni);
    mk_gate("th22di", "z", "init", "z", "ack", "a", &th22di);
}
